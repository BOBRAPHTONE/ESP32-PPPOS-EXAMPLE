diff --git /esp-idf/components/esp32/Kconfig /esp-idf-ppp/components/esp32/Kconfig
index db9bb25..b33338d 100644
--- /esp-idf/components/esp32/Kconfig
+++ /esp-idf-ppp/components/esp32/Kconfig
@@ -117,6 +117,12 @@ config SYSTEM_EVENT_TASK_STACK_SIZE
     help
         Config system event task stack size in different application.
 
+config TCPIP_TASK_STACK_SIZE
+    int "TCP/IP Task Stack Size"
+    default 2048
+    help
+       Configure TCP/IP task stack size, used by LWIP to process multi-threaded TCP/IP operations.
+       The default is 2048 bytes, setting this stack too small will result in stack overflow crashes.
 
 config MAIN_TASK_STACK_SIZE
     int "Main task stack size"
diff --git /esp-idf/components/esp32/include/esp_task.h /esp-idf-ppp/components/esp32/include/esp_task.h
index bb028bf..8a1f1b9 100644
--- /esp-idf/components/esp32/include/esp_task.h
+++ /esp-idf-ppp/components/esp32/include/esp_task.h
@@ -52,7 +52,7 @@
 #define ESP_TASKD_EVENT_PRIO          (ESP_TASK_PRIO_MAX - 5)
 #define ESP_TASKD_EVENT_STACK         CONFIG_SYSTEM_EVENT_TASK_STACK_SIZE
 #define ESP_TASK_TCPIP_PRIO           (ESP_TASK_PRIO_MAX - 7)
-#define ESP_TASK_TCPIP_STACK          2048
+#define ESP_TASK_TCPIP_STACK          CONFIG_TCPIP_TASK_STACK_SIZE
 #define ESP_TASK_MAIN_PRIO            (ESP_TASK_PRIO_MIN + 1)
 #define ESP_TASK_MAIN_STACK           CONFIG_MAIN_TASK_STACK_SIZE
 
diff --git /esp-idf/components/lwip/Kconfig /esp-idf-ppp/components/lwip/Kconfig
index 0070ef4..c1b1c67 100644
--- /esp-idf/components/lwip/Kconfig
+++ /esp-idf-ppp/components/lwip/Kconfig
@@ -89,6 +89,46 @@ config LWIP_DHCP_DOES_ARP_CHECK
         Enabling this option allows check if the offered IP address is not already
         in use by another host on the network.
 
+config PPP_SUPPORT
+    bool "Enable PPP support"
+    default 0
+    help
+        Enable PPP stack. Now only PPP over serial is supported
+
+if PPP_SUPPORT
+
+config PPP_PAP_SUPPORT
+   bool "Enable PAP support"
+   default 0
+   help
+       Enable Password Authentication Protocol (PAP) support
+       
+config PPP_CHAP_SUPPORT
+   bool "Enable CHAP support"
+   default 0
+   help
+       Enable Challenge Handshake Authentication Protocol (CHAP) support 
+
+config PPP_MSCHAP_SUPPORT
+   bool "Enable MSCHAP support"
+   default 0
+   help
+       Enable Microsoft version of the Challenge-Handshake Authentication Protocol (MSCHAP) support
+       
+config PPP_MPPE_SUPPORT
+   bool "Enable MPPE support"
+   default 0
+   help
+       Enable Microsoft Point-to-Point Encryption (MPPE) support
+       
+config PPP_DEBUG_ON
+   bool "Enable PPP debug logs"
+   default 0
+   help
+       Enable PPP debug logs
+
+endif
+   
 endmenu
 
 
diff --git /esp-idf/components/lwip/api/pppapi.c /esp-idf-ppp/components/lwip/api/pppapi.c
index b5dcd14..2212233 100755
--- /esp-idf/components/lwip/api/pppapi.c
+++ /esp-idf-ppp/components/lwip/api/pppapi.c
@@ -73,10 +73,10 @@ pppapi_set_default(ppp_pcb *pcb)
 static err_t
 pppapi_do_ppp_set_auth(struct tcpip_api_call *m)
 {
-  struct pppapi_msg_msg *msg = (struct pppapi_msg_msg *)m;
+  struct pppapi_msg *msg = (struct pppapi_msg *)m;
 
-  ppp_set_auth(msg->ppp, msg->msg.setauth.authtype,
-               msg->msg.setauth.user, msg->msg.setauth.passwd);
+  ppp_set_auth(msg->msg.ppp, msg->msg.msg.setauth.authtype,
+               msg->msg.msg.setauth.user, msg->msg.msg.setauth.passwd);
   return ERR_OK;
 }
 
@@ -131,10 +131,10 @@ pppapi_set_notify_phase_callback(ppp_pcb *pcb, ppp_notify_phase_cb_fn notify_pha
 static err_t
 pppapi_do_pppos_create(struct tcpip_api_call *m)
 {
-  struct pppapi_msg_msg *msg = (struct pppapi_msg_msg *)m;
+  struct pppapi_msg *msg = (struct pppapi_msg *)(m);
 
-  msg->ppp = pppos_create(msg->msg.serialcreate.pppif, msg->msg.serialcreate.output_cb,
-    msg->msg.serialcreate.link_status_cb, msg->msg.serialcreate.ctx_cb);
+  msg->msg.ppp = pppos_create(msg->msg.msg.serialcreate.pppif, msg->msg.msg.serialcreate.output_cb,
+    msg->msg.msg.serialcreate.link_status_cb, msg->msg.msg.serialcreate.ctx_cb);
   return ERR_OK;
 }
 
@@ -247,9 +247,9 @@ pppapi_pppol2tp_create(struct netif *pppif, struct netif *netif, ip_addr_t *ipad
 static err_t
 pppapi_do_ppp_connect(struct tcpip_api_call *m)
 {
-  struct pppapi_msg_msg *msg = (struct pppapi_msg_msg *)m;
+  struct pppapi_msg *msg = (struct pppapi_msg *)m;
 
-  return ppp_connect(msg->ppp, msg->msg.connect.holdoff);
+  return ppp_connect(msg->msg.ppp, msg->msg.msg.connect.holdoff);
 }
 
 /**
@@ -300,9 +300,9 @@ pppapi_listen(ppp_pcb *pcb, struct ppp_addrs *addrs)
 static err_t
 pppapi_do_ppp_close(struct tcpip_api_call *m)
 {
-  struct pppapi_msg_msg *msg = (struct pppapi_msg_msg *)m;
+  struct pppapi_msg *msg = (struct pppapi_msg *)m;
 
-  return ppp_close(msg->ppp, msg->msg.close.nocarrier);
+  return ppp_close(msg->msg.ppp, msg->msg.msg.close.nocarrier);
 }
 
 /**
@@ -349,9 +349,9 @@ pppapi_free(ppp_pcb *pcb)
 static err_t
 pppapi_do_ppp_ioctl(struct tcpip_api_call *m)
 {
-  struct pppapi_msg_msg *msg = (struct pppapi_msg_msg *)m;
+  struct pppapi_msg *msg = (struct pppapi_msg *)m;
 
-  return ppp_ioctl(msg->ppp, msg->msg.ioctl.cmd, msg->msg.ioctl.arg);
+  return ppp_ioctl(msg->msg.ppp, msg->msg.msg.ioctl.cmd, msg->msg.msg.ioctl.arg);
 }
 
 /**
diff --git /esp-idf/components/lwip/component.mk /esp-idf-ppp/components/lwip/component.mk
index 9444d22..d42bc4f 100644
--- /esp-idf/components/lwip/component.mk
+++ /esp-idf-ppp/components/lwip/component.mk
@@ -4,7 +4,7 @@
 
 COMPONENT_ADD_INCLUDEDIRS := include/lwip include/lwip/port include/lwip/posix apps/ping
 
-COMPONENT_SRCDIRS := api apps/sntp apps/ping apps core/ipv4 core/ipv6 core netif port/freertos port/netif port
+COMPONENT_SRCDIRS := api apps/sntp apps/ping apps core/ipv4 core/ipv6 core netif netif/ppp netif/ppp/polarssl port/freertos port/netif port
 
 CFLAGS += -Wno-address  # lots of LWIP source files evaluate macros that check address of stack variables
 
diff --git /esp-idf/components/lwip/include/lwip/port/lwipopts.h /esp-idf-ppp/components/lwip/include/lwip/port/lwipopts.h
index dc82649..dfe0741 100644
--- /esp-idf/components/lwip/include/lwip/port/lwipopts.h
+++ /esp-idf-ppp/components/lwip/include/lwip/port/lwipopts.h
@@ -503,6 +503,56 @@
    ---------------------------------
 */
 
+/**
+ * PPP_SUPPORT==1: Enable PPP.
+ */
+#define PPP_SUPPORT                     CONFIG_PPP_SUPPORT
+
+#if PPP_SUPPORT
+
+/**
+ * PAP_SUPPORT==1: Support PAP.
+ */
+#define PAP_SUPPORT                     CONFIG_PPP_PAP_SUPPORT
+
+/**
+ * CHAP_SUPPORT==1: Support CHAP.
+ */
+#define CHAP_SUPPORT                    CONFIG_PPP_CHAP_SUPPORT
+
+/**
+ * MSCHAP_SUPPORT==1: Support MSCHAP.
+ */
+#define MSCHAP_SUPPORT                  CONFIG_PPP_MSCHAP_SUPPORT
+
+/**
+ * CCP_SUPPORT==1: Support CCP.
+ */
+#define MPPE_SUPPORT                    CONFIG_PPP_MPPE_SUPPORT
+
+/**
+ * PPP_MAXIDLEFLAG: Max Xmit idle time (in ms) before resend flag char.
+ * TODO: If PPP_MAXIDLEFLAG > 0 and next package is send during PPP_MAXIDLEFLAG time,
+ *       then 0x7E is not added at the begining of PPP package but 0x7E termination
+ *       is always at the end. This behaviour brokes PPP dial with GSM (PPPoS).
+ *       The PPP package should always start and end with 0x7E.
+ */
+
+#define PPP_MAXIDLEFLAG                 0
+
+/**
+ * PPP_DEBUG: Enable debugging for PPP.
+ */
+#define PPP_DEBUG_ON					CONFIG_PPP_DEBUG_ON
+
+#if PPP_DEBUG_ON
+#define PPP_DEBUG                       LWIP_DBG_ON
+#else
+#define PPP_DEBUG                       LWIP_DBG_OFF
+#endif
+
+#endif
+
 /*
    --------------------------------------
    ---------- Checksum options ----------
diff --git /esp-idf/components/lwip/port/freertos/sys_arch.c /esp-idf-ppp/components/lwip/port/freertos/sys_arch.c
index 7f96c9b..45008e1 100755
--- /esp-idf/components/lwip/port/freertos/sys_arch.c
+++ /esp-idf-ppp/components/lwip/port/freertos/sys_arch.c
@@ -444,6 +444,13 @@ sys_init(void)
 
 /*-----------------------------------------------------------------------------------*/
 u32_t
+sys_jiffies(void)
+{
+  return xTaskGetTickCount();
+}
+
+/*-----------------------------------------------------------------------------------*/
+u32_t
 sys_now(void)
 {
   return xTaskGetTickCount();
